{"version":3,"sources":["api.js","components/Messenger.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","connect","c","document","getElementById","ctx","getContext","score","controls","left","right","up","space","active","e","isActive","type","keyCode","emit","drawElements","els","forEach","el","s","font","fillText","emoji","x","y","fillStyle","color","fillRect","width","height","on","clearRect","concat","_","window","addEventListener","Messenger","_this","this","today","Date","toUTCString","react_default","a","createElement","props","user","onSubmit","msg","preventDefault","submitMessage","stamp","id","className","onChange","updateMsg","value","onClick","submitMsg","msgs","map","m","Component","App","users","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","target","setTimeout","state","userID","positions","data","_this$state","online","filter","u","length","key","Messenger_Messenger","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d482e972.chunk.js","sourcesContent":["import io from 'socket.io-client';\nimport { request } from 'http';\nconst  socket = io.connect('http://localhost:5000');\nfunction broadcastUser(user) {\nsocket.on('user', data => user(data));\n}\nfunction broadcastUsers(users) {\n    socket.on('users', data => users(data))\n}\nfunction submitMessage(e, msg) {\n    e.preventDefault();\n    socket.emit('submitMsg', msg);\n}\nfunction broadcastMessages(msgs) {\n    socket.on('msg', data => msgs(data));\n}\n\nlet c = document.getElementById(\"canvas\"),\nctx = c.getContext(\"2d\");\n\nlet score = 0;\nlet controls = {\n    left: false,\n    right: false,\n    up: false,\n    space: false,\n    active: function(e) {\n        let isActive = e.type === 'keydown' ? true : false;\n        switch(e.keyCode) {\n            case 37: controls.left = isActive;\n            break;\n            case 39: controls.right = isActive;\n            break;\n            case 38: controls.up = isActive;\n            break;\n            default: \n        }\n        if (e.type === 'keydown' && e.keyCode === 32) {\n            socket.emit('bullets');\n        }\n        socket.emit('controls', controls);\n    }\n\n}\nfunction drawSquare(s) {\n    ctx.fillStyle = s.color;\n    ctx.fillRect(s.x,s.y,s.width,s.height);\n}\nfunction drawElements(els) {\n        els.forEach(type => {\n        type.forEach(el => {\n            if (el.type === 'player') {\n                ctx.font = \"35px Arial\";\n                ctx.fillText(el.emoji,el.x ,el.y + 35);\n            }\n            else if (el.type === 'enemy') {\n                ctx.font = \"40px Arial\";\n                ctx.fillText(`👹`,el.x ,el.y + 40);\n            }\n            else {\n                drawSquare(el);\n            }\n        })\n    })\n}\n\nsocket.on('drawElements', els => {\n    ctx.clearRect(0, 0, c.width, c.height);\n    drawElements(els);\n    ctx.font = \"30px Arial\";\n    ctx.fillText(`Score: ${score}`,10 ,50);\n});\nsocket.on('score', s => {\n score = s;\n})\nsocket.on('gameOver', _ => {\n    ctx.font = '90px Arial';\n    ctx.fillStyle = 'red';\n    ctx.fillText(`☠️`, c.width/2 -45, c.height/2 - 20);\n});\n\nfunction element(x, y, width, height, color, type) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.color = color;\n    this.type = type;\n    this.gravity = .5;\n    this.yVelocity = 0;\n    this.xVelocity = 0;\n    this.drag = 0.9;\n    this.friction = 0.9;\n    this.jump = false;\n}\n\n/*\nlet platforms = [],\nplayers = [],\nbullets = [],\nenemies = [],\nlives = 1,\nrandom = function(min, max) {\n    let num = Math.floor(Math.random() * Math.floor(max));\n    return num > min ? num : num + min;\n},\ncolors = ['black', 'brown', 'white'];\n\n//create players\n\nplayers.push(new element(100 + (100/2) - (20/2), c.height - 50 - 40, 20, 40, 'orange', 'player'));\n\n//create initial platforms\n\nplatforms.push(new element(100, c.height - 50, 100, 50, 'green', 'platform'));\nfor (let i=1; i<1000; i++) {\n        let width = random(50, 400),\n        height = random(50, 400),\n        color = colors[random(0, colors.length)],\n        x = platforms[i-1].x + random(50, 200) + platforms[i-1].width;\n        platforms.push(new element(x, c.height - height, width, height, color, 'platform'));\n}\n\n//create enemies\nplatforms.forEach(p => {\n    if (p !== platforms[0] && random(0, 10) < 5) {\n        enemies.push(new element(p.x + random(10, p.width - 10), p.y - 45, 25, 45, 'green', 'enemy'));\n    }\n    function enemy() {\n        if (p !== platforms[0] && random(0, 10) < 4) {\n        enemies.push(new element(p.x + random(10, p.width - 10), p.y - 45, 25, 45, 'green', 'enemy'));\n        enemy();\n    }\n    }\nenemy();\n})\n\n\nfunction drawSquare(s) {\n    ctx.fillStyle = s.color;\n    ctx.fillRect(s.x,s.y,s.width,s.height);\n}\n\nvar img = new Image();\nimg.src = 'http://www.valeriekrealty.com/realtypath.png';\nctx.drawImage(img, 100, 0);\nfunction makeElements() {\n    let floor = c.height + 100;\n    ctx.clearRect(0, 0, c.width, c.height);\n\n    ctx.font = \"30px Arial\";\n    ctx.fillText(`Score: ${score}`,10 ,50);\n\n//draw platforms\n    for (let i=0; i < platforms.length; i++) {\n        //platforms[i].x += -1.5;\n        drawSquare(platforms[i]);\n    };\n    players.forEach(p => {\n        if (p.y < c.height && lives !== 0) {\n            requestAnimationFrame(makeElements);\n        }\n        else if (lives === 0) {\n            ctx.font = '90px Arial';\n            ctx.fillStyle = 'red';\n            ctx.fillText(`☠️`, c.width/2 -45, c.height/2 - 20);\n            p.color = 'red';\n            drawSquare(p);\n        }\n        else {\n            lives -= 1;\n            requestAnimationFrame(makeElements);\n        }\n        ctx.font = \"30px Arial\";\n        ctx.fillText(`🥐`,p.x ,p.y + 30);\n\n        p.yVelocity += p.gravity;\n        p.y += p.yVelocity;\n        if (controls.up) {\n            p.y -= 18;\n        }\n        if (controls.left) {\n            p.x -= 5;\n        }\n        if (controls.right) {\n            p.x += 5;\n            if (p.x > c.width - 200) {\n                enemies.forEach(e => {\n                e.x -= 5;\n            })\n            }\n        }\n        if (controls.space) {\n        }\n        document.body.onkeyup = function(e) {\n            if(e.keyCode === 32) {\n                bullets.push(new element(p.x + 20, p.y + 10, 10, 10, 'gray', 'bullet'));\n            }\n        }\n        if (p.x <= 0) {\n            p.x = 0;\n        }\n        enemies.forEach(e => {\n            ctx.font = \"40px Arial\";\n            ctx.fillText(`👹`,e.x ,e.y + 40);\n            if (p.x > e.x && p.x < e.x + e.width &&\n                p.y > e.y && p.y < e.y + e.height) {\n                    lives -= 1;\n            }\n            bullets.forEach(b => {\n                if (b.x > e.x && b.x < e.x + e.width &&\n                    b.y > e.y && b.y < e.y + e.height) {\n                        e.x = 50000;\n                        b.x = 60100;\n                        score += 1;\n                    }\n            })\n        })\n        bullets.forEach(b => {\n            drawSquare(b);\n            b.x +=5;\n            if (b.x > p.x + c.width) {\n                b.x = 50000;\n            }\n        })\n        platforms.forEach(plat => {\n            if (p.x > c.width - 200) {\n                plat.x -= 5;\n                p.x -= .01;\n            }\n            if (p.x >= plat.x && p.x <= plat.x + plat.width) {\n                floor = c.height - 40 - plat.height;\n                if (p.y > floor && p.y < floor+50) {\n            p.yVelocity = 0;\n            p.y = c.height - plat.height - 40;\n        }\n            }\n        })\n\n    })\n}\n\nmakeElements();\n*/\n\nwindow.addEventListener('keydown', controls.active);\nwindow.addEventListener('keyup', controls.active);\n\nexport { broadcastUser, broadcastUsers, submitMessage, broadcastMessages };","import React, { Component } from 'react';\nimport { submitMessage } from '../api';\n\nexport default class Messenger extends Component {\n    render() {\n        let today = new Date().toUTCString()\n        return (\n            <div>\n                <h5>Welcome: <span>{this.props.user}</span></h5>\n                <form onSubmit={e => this.props.msg === '' ?\n                    e.preventDefault() :\n                    submitMessage(e, { msg: this.props.msg, user: this.props.user, stamp: today })}>\n                    <input id='message' className='form-control' type='text'\n                        onChange={this.props.updateMsg} value={this.props.msg} />\n                    <button id='submit' className='btn btn-success' type='submit'\n                        onClick={this.props.submitMsg}>Send</button>\n                </form>\n                <div id='messages'>{this.props.msgs.map(m =>\n                    <p className='msg'>\n                        <code className={m.user === this.props.user ? 'myMsg' : ''}>{m.user}:</code>\n                        {` ${m.msg}`}<caption>{m.stamp}</caption></p>)}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport { broadcastUser, broadcastUsers, broadcastMessages } from './api';\nimport Messenger from './components/Messenger';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userID: 'none',\n      users: [],\n      msg: '',\n      msgs: [],\n      positions: []\n    }\n    broadcastUser((user) => this.setState({\n      userID: user\n    }));\n    broadcastUsers((users) => this.setState({\n      users: users\n    }));\n    broadcastMessages(msgs => this.setState({\n      msgs: msgs\n    }))\n  }\n  updateMsg = e => {\n    this.setState({\n      msg: e.target.value\n    })\n  }\n  submitMsg = () => {\n    setTimeout(() => this.setState({\n      msg: ''\n    }), 50);\n  }\n  render() {\n    const { userID, users } = this.state;\n    var online = users.filter(u => u !== userID);\n    return (\n      <div className=\"App\">\n        <header className=\"online\">\n          <h5>ONLINE <div className='icon'>{this.state.users.length - 1}</div></h5>\n          {online.map( u => <div key={u}>{u}</div>)}\n        </header>\n        <Messenger msg={this.state.msg}\n        msgs={this.state.msgs}\n        updateMsg={this.updateMsg}\n        submitMsg={this.submitMsg}\n        user={this.state.userID} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}